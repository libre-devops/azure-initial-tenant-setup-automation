name: 'Terraform Plan'

# Allow run manually
on:
  workflow_dispatch:


jobs:
  azure-terraform-job:
    name: 'Terraform Build'
    runs-on: ubuntu-latest
    env:
      working_directory: 2-terraform-build
      terraform_version: "1.5.5"
      terraform_workspace: "prd"
      checkov_skipped_tests: ""
      terraform_compliance_policy_path: "https://github.com/libre-devops/azure-naming-convention.git//?ref=main"
      ARM_CLIENT_ID: ${{ secrets.SpokeSvpClientId }}
      ARM_CLIENT_SECRET: ${{ secrets.SpokeSvpClientSecret }}
      ARM_TENANT_ID: ${{ secrets.SpokeTenantId }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.SpokeSubId }}
      ARM_USE_AZUREAD: true
      ARM_BACKEND_STORAGE_ACCOUNT: ${{ secrets.SpokeSaName }}
      ARM_BACKEND_BLOB_CONTAINER_NAME: ${{ secrets.SpokeSaBlobContainerName }}
      ARM_BACKEND_STATE_KEY: "management-setup.terraform.tfstate"

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.working_directory }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Install Tfenv
        id: install-packages
        run: |
          brew install tfenv tfsec

      - name: Setup Tfenv and Install terraform
        id: setup-tfenv
        run: |
          if [ -z "${terraform_version}" ]; then
            echo "terraform_version is empty or not set., setting to latest" && export terraform_version="latest"
          
          else
            echo "terraform_version is set, installing terraform version ${terraform_version}"
          fi

          tfenv install ${terraform_version} && tfenv use ${terraform_version}

      - name: Terraform Init, Validate & Plan
        id: terraform-init-validate-plan
        run: |
          terraform init \
          -backend-config="storage_account_name=${ARM_BACKEND_STORAGE_ACCOUNT}" \
          -backend-config="container_name=${ARM_BACKEND_BLOB_CONTAINER_NAME}" \
          -backend-config="key=${ARM_BACKEND_STATE_KEY}" && \
          terraform workspace new ${terraform_workspace} || terraform workspace select $terraform_workspace
          terraform validate && \
          terraform plan -out tfplan

      - name: terraform-compliance
        id: terraform-compliance-check
        uses: terraform-compliance/github_action@0.3.0
        with:
          plan: "${{ env.working_directory }}/tfplan"
          features: ${{ env.terraform_compliance_policy_path }}
